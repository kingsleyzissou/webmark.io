<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Document</title>
  <!-- <link rel="stylesheet" type="text/css" href="/css/normalize.css">
  <link rel="stylesheet" type="text/css" href="/css/bulma.css">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.0.10/css/all.css" integrity="sha384-+d0P83n9kaQMCwj8F4RJB66tzIwOKmrdb46+porD/OvrJ+37WqIM7UoBtwHO6Nlg" crossorigin="anonymous">  
  <link rel="stylesheet" type="text/css" href="/css/style.css"> -->
  <% include ../../partials/head %>
    <style>
      body {
        background: #f9fafc;
      }
      
      .card {
        box-shadow: none;
      }
      
      .collection {
        margin: 1em 0;
        padding: 0;
        transition: 0.5s ease;
        display: flex;
        flex-direction: column;
        height: 100%;
        /* border: 1.5px solid #dbdbdb */
      }

      .collection .card-footer {
        margin-top: auto;
      }

      .card-image-overlay {
        position: absolute;
        top: 0;
        left: 0;
        z-index: 5;
        width: 100%;
        height: 100%;
        background: rgba(17,17,17,0.6);
        opacity: 0;
        transition: .5s ease;
      }
      
      .collection:hover .card-image-overlay {
        opacity: 1;
      }
      
      .collection:hover {
        /* color: #ffffff; */
        background-color: rgba(100,100,100,0.2);     
      }

      /* .bm--card-equal-height {
        
      } */
      
      
      /* .collection:hover .title {
        color: #ffffff;
      } */
      
      .dropzone.highlight {
        background: rgba(17, 17, 17, 0.3)
      }
      
      .overlay {
        background: rgba(255, 255, 255, 0.8);
        font-size: 2rem;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
        width: 100%;
        position: absolute;
        z-index: 1000;
      }
      
      .overlay:before {
        content: "";
        /* you need something or it will be invisible at least on Chrome */
        background: transparent;
        position: absolute;
        z-index: 1001;
        left: 10px;
        right: 10px;
        top: 10px;
        width: 10px;
        border: 4px dashed rgba(17, 17, 17, 0.5);
        height: calc(100% - 20px);
        width: calc(100% - 20px);
      }
    </style>
</head>

<body>
  <div id="content" v-dropzone @dragenter="overlay = true" @dragover="overlay = true" @dragleave="overlay = false" @drop="handleFile($event)">

    <section class="hero is-info">
      <!-- Hero head: will stick at the top -->
      <% include ../../partials/navbar %>

        <nav class="navbar has-shadow has-text-white" style="background: #3AB6FF">
          <div class="container"></div>
        </nav>

    </section>

    <div class="overlay" v-if="overlay">
      <p class="is-title">
        Add file
      </p>
    </div>

    <section class="columns" style="padding: 1em">
      <% include ../../partials/sidebar %>
        <div class="column is-three-quarters">
          <nav class="level">
            <div class="level-left">
              <nav class="breadcrumb" aria-label="breadcrumbs">
                <ul>
                  <li>Library&nbsp;</li>
                  <li>&nbsp;{{ library.title }}</li>
                </ul>
              </nav>
            </div>
          </nav>

          <section>
            <div class="card" style="margin-top: 1em">
              <div class="card-content">
                <nav class="level">
                  <div class="level-left">
                    <p class="title">Bookmarks</p>
                  </div>
                  <div class="level-right">
                    <button class="button is-white" @click="expanded = !expanded">
                      <i class="fa" :class="{ 'fa-plus': !expanded, 'fa-minus': expanded }"></i>
                    </button>
                  </div>
                </nav>
                <form method="POST" action="" v-if="expanded" @keydown="errors.clear($event.target.name)">
                  <div class="field">
                    <div class="control">
                      <label class="label" for="">Title:</label>
                      <input class="input" :class="{ 'is-danger': errors.has('title') }" type="text" name="title" v-model="form.title" placeholder="Enter a title...">
                    </div>
                    <small class="has-text-danger" v-if="errors.has('title')">
                      {{ errors.get('title') }}
                    </small>
                  </div>
                  <div class="field">
                    <div class="control">
                      <label class="label" for="">Url:</label>
                      <input class="input" :class="{ 'is-danger': errors.has('url') }" type="text" name="url" v-model="url" placeholder="Enter a url..." @keyup="getPreview(url)">
                    </div>
                    <small class="has-text-danger" v-if="errors.has('url')">
                        {{ errors.get('url') }}
                    </small>
                  </div>
                  <div class="field" v-if="Object.keys(preview).length > 0" style="border: 1px solid rgba(100,100,100,0.2); padding: 1em;">
                    <div class="media">
                      <div class="media-left">
                        <figure class="image is-64x64" style="display: flex; justify-content: center; align-items: center;">
                          <img :src="preview.images[0]" class="is-fluid">
                        </figure>
                      </div>
                      <div class="media-content">
                        <p class="title is-5 is-marginless">
                          {{ preview.title }}
                        </p>
                        <p v-if="preview.description">
                          {{ preview.description }}
                        </p>
                        <p v-else>
                          No description available
                        </p>
                      </div>
                    </div>
                  </div>
                  <div class="field" v-if="Object.keys(preview).length > 0 && preview.description">
                    <div class="control">
                      <label class="label" for="">Use the above description?</label>
                      <label class="radio">
                        <input type="radio" name="selected" value="true" v-model="selected">
                        Yes
                      </label>
                      <label class="radio">
                        <input type="radio" name="selected" value="false" v-model="selected">
                        No
                      </label>
                    </div>
                  </div>
                  <div class="field" v-if="Object.keys(preview).length > 0 && (!preview.description || selected == 'false')">
                    <div class="control">
                      <label class="label" for="">Description:</label>
                      <textarea class="textarea" name="description" v-model="form.description" placeholder="Description..."></textarea>
                    </div>
                  </div>
                  <label class="label is-marginless" for="">Add image:</label>
                  <span>Drag and drop a file anywhere on this page or click below to add a file</span>

                  <div class="field">
                    <div class="file has-name is-fullwidth is-right" :class="{ 'is-danger': errors.has('file') }">
                      <label class="file-label">
                        <input class="file-input" type="file" name="file" @change="handleFile($event)">
                        <span class="file-cta">
                          <span class="file-icon">
                            <i class="fas fa-upload"></i>
                          </span>
                          <span class="file-label">
                            Choose a fileâ€¦
                          </span>
                        </span>
                        <span class="file-name" v-if="form.file">
                          {{ form.file.name }}
                        </span>
                      </label>
                    </div>
                    <small class="has-text-danger" v-if="errors.has('file')">
                        {{ errors.get('file') }}
                    </small>
                  </div>
                  <div class="buttons is-right">
                    <button class="button is-block is-info" :class="{ 'is-loading': submitting }" type="submit" @click.prevent="submit">
                      Add
                    </button>
                  </div>
                </form>
                <hr>
              </div>
            </div>
          </section>
          <section>
              <div class="columns" v-for="(chunk,index) in bookmarksChunk" v-if="bookmarks.length > 0">
                  <div class="column is-4" v-for="(bookmark,i) in chunk" v-if="bookmarks.length > 0">
                    <div class="card collection">
                      <div class="card-image">
                        <figure class="image is-4by3">
                          <img :src="bookmark.image_url" alt="Bookmark image">
                        </figure>
                        <div class="card-image-overlay"></div>
                      </div>
                      <div class="card-content has-text-centered">
                        <p class="title">{{ bookmark.title }}</p>
                        <p >{{ bookmark.description }}</p>
                      </div>
                      <footer class="card-footer">
                        <a :href="bookmark.url" target="__blank" class="card-footer-item">
                          View&nbsp;
                          <i class="fas fa-eye"></i>
                        </a>
                        <a href="" @click.prevent="confirmDelete(bookmark, index)" class="card-footer-item">
                          Delete&nbsp;
                          <i class="fas fa-trash"></i>
                        </a>
                      </footer>
                    </div>
                  </div>
                </div>
                <div class="columns" v-if="bookmarks.length == 0">
                  <div class="column has-text-centered">
                    <div class="card" style="margin: 1em 0">
                      <div class="card-content">
                        <p class="subtitle">
                          Oops, you have no bookmarks in this collection. Manage bookmarks here by adding them to the collection.
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
          </section>
        </div>
    </section>
    <section>
      <div class="modal" :class="{ 'is-active': modal }">
          <div class="modal-background"></div>
          <div class="modal-content">
            <section class="modal-card-body">
              <strong>
                Are you sure you want to delete {{ temp.title }} bookmark?
              </strong>
              <hr>
              <button 
                class="button"
                @click="modal=false"
              >
                Cancel
              </button>
              <button 
                class="button is-danger is-pulled-right" 
                @click="deleteBookmark"
              >
                Delete
              </button>
            </section>
          </div>
          <button class="modal-close is-large" aria-label="close" @click="modal=false"></button>
        </div>
    </section>
    <section style="height: 400px"></section>
  </div>

  <% include ../../partials/scripts %>
    <script src="https://cdn.jsdelivr.net/npm/lodash@4.17.5/lodash.min.js"></script>

    <input id="bookmarks" type="hidden" value="<%= JSON.stringify(bookmarks) %>">
    <input id="library" type="hidden" value="<%= JSON.stringify(library) %>">
    
    <script>
      let bookmarks = JSON.parse(document.getElementById('bookmarks').value)
      let library = JSON.parse(document.getElementById('library').value)

      Vue.directive('dropzone', {
        params: ['drag-over', 'drop'],
        bind: function(el, binding, vnode) {
          el.addEventListener('dragover', event => {
            event.preventDefault()
            event.dataTransfer.dropEffect = 'copy'
            vnode.context.$emit('drag-over')
          }, false)

          el.addEventListener('drop', event => {
            event.preventDefault()

            if (event.stopPropagation) {
              event.stopPropagation()
            }

            vnode.context.$emit('drop')
          }, false)
        }
      })

      class Errors {
        constructor() {
          this.errors = {}
        }

        get(field) {
          if (this.errors[field]) {
            return this.errors[field].msg
          }
        }

        set(errors) {
          this.errors = errors
        }

        add(field, error) {
          this.errors[field]= error
        }

        has(field) {
          return this.errors.hasOwnProperty(field)
        }

        clear(field) {
          delete this.errors[field]
        }

        any() {
          return Object.keys(this.errors).length > 0
        }

        reset() {
          this.errors = {}
        }
      }

      let app = new Vue({
        el: '#content',
        data() {
          return {
            user: user,
            library: library,
            bookmarks: bookmarks,
            errors: {},
            valid: {
              file: -1
            },
            errors: new Errors(),
            form: {
              file: {},
              title: '',
              url: '',
              description: '',
              library_id: library.id
            },
            temp: {},
            url: '',
            selected: 'true',
            complete: false,
            modal: false,
            expanded: false,
            active: false,
            overlay: false,
            submitting: false,
            preview: {}
          }
        },
        methods: {
          handleFile(event) {
            this.overlay = false
            this.errors.clear('file')
            let file = (event.type === 'drop') ? event.dataTransfer.files[0] : event.target.files[0]
            let pattern = /image\/*/
            if (!pattern.exec(file.type)) {
              this.errors.add('file', 'Only image files are allowed')
              return
            }
            this.form.file = file
          },
          submit() {
            this.submitting = true
            let formData = new FormData()
            formData.append('file', this.form.file)
            formData.append('title', this.form.title)
            formData.append('url', this.form.url)
            formData.append('description', this.form.description)
            formData.append('library_id', this.form.library_id)
            axios.post('/bookmark', formData)
              .then(result => {
                console.log(result.data)
                this.bookmarks.push(result.data.data)
                this.submitting = false
                this.reset()
              })
              .catch(err => {
                console.log(err.response.data)
                this.errors.set(err.response.data.errors)
              })
          },
          confirmDelete(bookmark, index) {
            this.temp = bookmark
            this.temp.index = index
            this.modal = true
          },
          deleteBookmark() {
            axios.delete('/bookmark/' + this.temp.id, { data: { id: this.temp.id } })
              .then((res) => {
                this.bookmarks.splice(this.temp.index, 1)
                this.temp = {}
                this.modal = false
              })
              .catch((err) => {
                console.log(err)
              })
          },
          reset() {
            this.form.file = {}
            this.form.title = ''
            this.form.url = ''
            this.form.description = ''
            this.url = ''
            this.preview = {}
          },
          getPreview: _.debounce((url) => {
            let urlPattern = /^((?:https?:\/\/)?[^./]+(?:\.[^./]+)+(?:\/.*)?)$/
            if(!urlPattern.exec(url)) {
              console.log(url)
              return
            }
            app.preview = {}
            app.form.description = ''
            let pattern = /https?:\/\//
            if (!pattern.exec(url)) {
              url = 'http://' + url
              app.form.url = url
            }
            axios.post('/bookmark/linkpreview', {
                url: url
              })
              .then(result => {
                console.log(app)
                app.preview = result.data.data
                if (result.data.data.description) {
                  app.form.description = result.data.data.description
                }
              })
          }, 1000),
        },
        computed: {
          bookmarksChunk () {
            return _.chunk(this.bookmarks,3)
          }
        }
      });
    </script>

</body>

</html>